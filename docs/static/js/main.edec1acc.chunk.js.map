{"version":3,"sources":["library/components/UTMInput.js","library/components/CopyToClipboard.js","library/components/UTMInputs.js","library/components/UTMTable.js","library/components/UTMBuilder.js","App.js","serviceWorker.js","index.js"],"names":["selectStyles","menu","provided","state","color","placeholder","fontSize","createOptionArray","values","map","value","label","toLowerCase","replace","UTMInput","props","handleChange","newValue","actionMeta","onChange","name","options","option","convertOptionToValue","handleCreate","onCreateOption","bind","source_values","this","isMulti","styles","closeMenuOnSelect","Component","copyTextToClipboard","text","navigator","clipboard","writeText","then","console","log","err","error","textArea","document","createElement","style","top","left","position","body","appendChild","focus","select","msg","execCommand","removeChild","fallbackCopyTextToClipboard","CopyToClipboard","alert","useAlert","onClick","generateText","success","UTMInputs","handleInput","event","target","handleCopy","sources","mediums","names","terms","content","source_options","medium_options","name_options","term_options","content_options","className","Grid","container","xs","sm","item","urls","useStyles","makeStyles","table","minWidth","UTMTable","items","key","push","rows","generateValues","classes","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","scope","url","source","medium","term","generated_url","assignDefaultArrayValue","state_value","length","UTMBuilder","utm_values","setState","name_values","utm_options","composeUrl","params","buildUrl","queryParams","all_combinations","r","arg","arguments","max","helper","arr","i","j","l","a","slice","cartesian","combination","generateTextValues","text_rows","join","href","timeout","positions","BOTTOM_CENTER","App","template","AlertTemplate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.edec1acc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport CreatableSelect from 'react-select/creatable';\n\nconst selectStyles = {\n  menu: (provided, state) => ({\n    ...provided,\n    color: 'black'\n  }),\n  placeholder: (provided, state) => ({\n    ...provided,\n    fontSize: 'calc(10px + 1vmin)'\n  })\n}\n\nconst createOption = (label) => ({\n  label,\n  value: label.toLowerCase().replace(/\\W/g, ''),\n});\n\nconst createOptionArray = (values) => {\n  if (values) {\n    return values.map((value) => {\n      return createOption(value);\n    });\n  } else {\n    return [];\n  }\n}\n\nconst convertOptionToValue = (options) => {\n  if (options) {\n    return options.map((option) => {\n      return option.value;\n    });\n  } else {\n    return []\n  }\n}\n\n\nexport default class UTMInput extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       \n    }\n    this.handleChange.bind(this);\n    this.handleCreate.bind(this);\n  }\n\n  handleChange = (newValue, actionMeta) => {\n    // console.group('Value Changed');\n    // console.log(newValue);\n    // console.log(`action: ${actionMeta.action}`);\n    // console.log(this);\n    // console.log(convertOptionToValue(newValue));\n    // console.groupEnd();\n    this.props.onChange(this.props.name, convertOptionToValue(newValue));\n  }\n\n  handleCreate = (newValue) => {\n    const value = newValue;\n    this.props.onCreateOption(this.props.name, value);\n  }\n\n  render() {\n    // console.log(this.props);\n    const source_values = createOptionArray(this.props.options);\n    const values = createOptionArray(this.props.value);\n    return (\n      <div>\n        <label>{this.props.label}</label>\n        <CreatableSelect\n          isMulti\n          name='sources'\n          onChange={this.handleChange}\n          onCreateOption={this.handleCreate}\n          options={source_values}\n          styles={selectStyles}\n          value={values}\n          closeMenuOnSelect={false}\n          placeholder='Select or Type in to Create'\n        />\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { useAlert } from \"react-alert\";\n\n\nfunction fallbackCopyTextToClipboard(text) {\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n\n  // Avoid scrolling to bottom\n  textArea.style.top = \"0\";\n  textArea.style.left = \"0\";\n  textArea.style.position = \"fixed\";\n\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand('copy');\n    var msg = successful ? 'successful' : 'unsuccessful';\n    console.log('Fallback: Copying text command was ' + msg);\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n}\nfunction copyTextToClipboard(text) {\n  if (!navigator.clipboard) {\n    fallbackCopyTextToClipboard(text);\n    return;\n  }\n  navigator.clipboard.writeText(text).then(function () {\n    console.log('Async: Copying to clipboard was successful!');\n  }, function (err) {\n    console.error('Async: Could not copy text: ', err);\n  });\n}\n\n\nexport default function CopyToClipboard(props) {\n  const alert = useAlert();\n\n  return (\n    <>\n      <button onClick={() => {\n        const text = props.generateText(props.values);\n        console.log(text);\n        copyTextToClipboard(text);\n        alert.success('Copied to Clipboard');\n      }}>\n        <span>Copy to Clipboard</span></button>\n    </>\n  )\n}\n","import React, { Component } from 'react';\n// import Creatable, { makeCreatableSelect } from 'react-select/creatable';\n// import CreatableSelect from 'react-select/creatable';\nimport { Grid } from '@material-ui/core';\nimport UTMInput from './UTMInput';\nimport CopyToClipboard from './CopyToClipboard';\n\nconst selectStyles = {\n  menu: (provided, state) => ({\n    ...provided,\n    color: 'black'\n  })\n}\n\nconst styles = {\n  input: {\n    backgroundColor: 'white'\n  }\n}\n\nconst createOption = (label) => ({\n  label,\n  value: label.toLowerCase().replace(/\\W/g, ''),\n});\n\nconst createOptionArray = (values) => {\n  return values.map((value) => {\n    return createOption(value);\n  });\n}\n\nconst convertOptionToValue = (options) => {\n  return options.map((option) => {\n    return option.value;\n  });\n}\n\nexport class UTMInputs extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       \n    }\n\n    this.handleCopy.bind(this);\n  }\n  \n  handleInput = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.props.handleInput(name, value);\n  }\n\n  // handleChange = (newValue, actionMeta) => {\n  //   console.group('Value Changed');\n  //   console.log(newValue);\n  //   console.log(`action: ${actionMeta.action}`);\n  //   console.log(this);\n  //   console.groupEnd();\n  //   this.props.handleChange(this.props.name, convertOptionToValue(newValue));\n  // }\n\n  // handleCreate = (newValue) => {\n  //   const value = newValue.value;\n  //   this.props.handleCreate(this.props.name, value);\n  // }\n\n  handleCopy = (event) => {\n    const text = this.props.generateText(this.props.values);\n    console.log(text);\n    // copyTextToClipboard(text);\n    \n  }\n\n  render() {\n    const { sources, mediums, names, terms, content } = this.props.values;\n    const { sources: source_options, mediums: medium_options, names: name_options, terms: term_options, content: content_options } = this.props.options;\n    \n    return (\n      <div className=\"\">\n        <Grid container className=\"form-group\">\n          <Grid container xs={12} sm={6}>\n            <Grid item xs={12} className=\"control-group\">\n              <label\n                className=\"form-label\">\n                  URL\n                  </label>\n              <input\n                className=\"entry\"\n                name=\"urls\"\n                value={this.props.values.urls}\n                onChange={this.handleInput} />\n            </Grid>\n            <Grid item xs={12} className=\"control-group\">\n              <UTMInput\n                name='sources'\n                label='Campaign Source(s)'\n                onChange={this.props.onChange}\n                onCreateOption={this.props.onCreateOption}\n                options={source_options}\n                styles={selectStyles}\n                value={sources}\n              />\n            </Grid>\n            <Grid item xs={12} className=\"control-group\">\n              <UTMInput\n                name='mediums'\n                label='Marketing Medium(s)'\n                onChange={this.props.onChange}\n                onCreateOption={this.props.onCreateOption}\n                options={medium_options}\n                styles={selectStyles}\n                value={mediums}\n              />\n            </Grid>\n            <Grid item xs={12} className=\"control-group\">\n              <UTMInput\n                name='names'\n                label='Campaign Name(s)'\n                onChange={this.props.onChange}\n                onCreateOption={this.props.onCreateOption}\n                options={name_options}\n                styles={selectStyles}\n                value={names}\n              />\n            </Grid>\n            <Grid item xs={12} className=\"control-group\">\n              <UTMInput\n                name='terms'\n                label='Term(s)'\n                onChange={this.props.onChange}\n                onCreateOption={this.props.onCreateOption}\n                options={term_options}\n                styles={selectStyles}\n                value={terms}\n              />\n            </Grid>\n            <Grid item xs={12} className=\"control-group\">\n              <UTMInput\n                name='content'\n                label='Content'\n                onChange={this.props.onChange}\n                onCreateOption={this.props.onCreateOption}\n                options={content_options}\n                styles={selectStyles}\n                value={content}\n              />\n            </Grid>\n            <Grid item xs={12} className=\"control-group\">\n              <CopyToClipboard\n              generateText={this.props.generateText} \n              values={this.props.values}/>\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default UTMInputs;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction UTMTable(props) {\n  const items = [];\n  for (const key in props.values) {\n    items.push(<p>{key}: {props.values[key]}</p>)\n  };\n  console.log(props.values);\n  const rows = props.generateValues(props.values);\n  console.log(rows);\n  const classes = useStyles();\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>URL</TableCell>\n            <TableCell align=\"right\">Source</TableCell>\n            <TableCell align=\"right\">Medium</TableCell>\n            <TableCell align=\"right\">Name</TableCell>\n            <TableCell align=\"right\">Term</TableCell>\n            <TableCell align=\"right\">Content</TableCell>\n            <TableCell align=\"right\">Generated URL</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.url}\n              </TableCell>\n              <TableCell align=\"right\">{row.source}</TableCell>\n              <TableCell align=\"right\">{row.medium}</TableCell>\n              <TableCell align=\"right\">{row.name}</TableCell>\n              <TableCell align=\"right\">{row.term}</TableCell>\n              <TableCell align=\"right\">{row.content}</TableCell>\n              <TableCell align=\"right\">{row.generated_url}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default UTMTable\n","import React, { Component } from 'react'\nimport UTMInputs from './UTMInputs';\nimport UTMTable from './UTMTable';\nimport buildUrl from 'build-url';\nimport { Grid } from '@material-ui/core';\n\nfunction cartesian() {\n  // From https://stackoverflow.com/a/15310051\n  var r = [], arg = arguments, max = arg.length - 1;\n  function helper(arr, i) {\n    for (var j = 0, l = arg[i].length; j < l; j++) {\n      var a = arr.slice(0); // clone arr\n      a.push(arg[i][j]);\n      if (i === max)\n        r.push(a);\n      else\n        helper(a, i + 1);\n    }\n  }\n  helper([], 0);\n  return r;\n}\n\nfunction assignDefaultArrayValue(state_value) {\n  if (state_value && state_value.length) {\n    return state_value;\n  } else {\n    return ['']\n  }\n}\n\nexport class UTMBuilder extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      utm_options: {\n        sources: ['google', 'facebook', 'newsletter'],\n        mediums: ['cpc', 'banner', 'email'],\n        names: [],\n        terms: [],\n        content: []\n      },\n      utm_values: {\n        urls: ['http://anancial.com'],\n        sources: [],\n        mediums: [],\n        names: [],\n        terms: [],\n        content: []\n      }\n    }\n\n    this.handleInput.bind(this);\n    this.generateValues.bind(this);\n  }\n\n  handleInput = (name, value) => {\n    const { utm_values } = this.state;\n    this.setState({\n      utm_values: { ...utm_values, [name]: [value] }\n    })\n  }\n\n  handleChange = (name, value) => {\n    const { utm_values } = this.state;\n    // const name_values = utm_values[name];\n    this.setState({\n      utm_values: {...utm_values, [name]: value}\n    })\n  }\n\n  handleCreate = (name, value) => {\n    const utm_values = this.state.utm_values;\n    const name_values = utm_values[name];\n    const utm_options = this.state.utm_options;\n    const name_options = utm_options[name];\n    console.log(utm_options);\n    console.log(name_options);\n  \n    this.setState({\n      utm_values: { ...utm_values, [name]: [...name_values, value] },\n      utm_options: {...utm_options, [name]: [...name_options, value]}\n    });\n  }\n \n  composeUrl = (url, source, medium, name, term, content) => {\n    let params = {};\n    if (source) {\n      params.source = source;\n    }\n    if (medium) {\n      params.medium = medium;\n    }\n    if (name) {\n      params.name = name;\n    }\n    if (term) {\n      params.term = term;\n    }\n    if (content) {\n      params.content = content;\n    }\n    return buildUrl(url, {\n      queryParams: params\n    })\n  }\n  \n  generateValues = (utm_values) => {\n    // const utm_values = this.state.utm_values;\n    console.log(\"values\");\n    console.log(utm_values);\n    const urls = assignDefaultArrayValue(utm_values.urls);\n    const sources = assignDefaultArrayValue(utm_values.sources);\n    const mediums = assignDefaultArrayValue(utm_values.mediums);\n    const names = assignDefaultArrayValue(utm_values.names);\n    const terms = assignDefaultArrayValue(utm_values.terms);\n    const content = assignDefaultArrayValue(utm_values.content);\n    const all_combinations = cartesian(urls, sources, mediums, names, terms, content);\n    console.log(\"combinations\")\n    console.log(all_combinations);\n\n    return all_combinations.map((combination) => {\n      const [ url, source, medium, name, term, content ] = combination;\n      const generated_url = this.composeUrl(url, source, medium, name, term, content)\n      return {\n        url: url,\n        source: source,\n        medium: medium,\n        name: name,\n        term: term,\n        content: content,\n        generated_url: generated_url\n      }\n    })\n  }\n\n  generateTextValues = (utm_values) => {\n    const generated_values = this.generateValues(utm_values);\n\n    const text_value_array = generated_values.map((row) => {\n      const { url, source, medium, name, term, content, generated_url } = row;\n      return `${url}\\t${source}\\t${medium}\\t${name}\\t${term}\\t${content}\\t${generated_url}\\t`;\n    });\n\n    const text_rows = text_value_array.join(\"\\n\");\n    const header = \"Url\\tSource\\tMedium\\tCampaign Name\\tCampaign Term\\tContent\\tGenerated Url\";\n    return `${header}\\n${text_rows}`\n  }\n  \n  render() {\n    return (\n      <div>\n        <h1>Bulk UTM Generator</h1>\n        <Grid container className=\"form-group\">\n          <Grid container xs={12} sm={6}>\n            <Grid item xs={12} className=\"control-group\">\n          <p className=\"blahblah\">You wanna create campaign parameters to URL but provided <a href=\"https://ga-dev-tools.appspot.com/campaign-url-builder/\">tool by Google</a> only allow one parameter value at a time? Here comes this tool! Put it as many values for each parameter as you want, and copy them all with just a click.</p>\n            </Grid>\n          </Grid>\n        </Grid>\n        <UTMInputs\n          options={this.state.utm_options}\n          values={this.state.utm_values}\n          onChange={this.handleChange} \n          onCreateOption={this.handleCreate}\n          handleInput={this.handleInput}\n          generateText={this.generateTextValues} />\n        <div className=\"spacer\"></div>\n        <UTMTable\n          values={this.state.utm_values}\n          generateValues={this.generateValues}/>\n      </div>\n    )\n  }\n}\n\nexport default UTMBuilder\n","import React from 'react';\nimport './App.css';\nimport UTMBuilder from './library/components/UTMBuilder';\nimport { positions, Provider } from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-basic\";\n\nconst options = {\n  timeout: 5000,\n  position: positions.BOTTOM_CENTER\n};\n\n\nfunction App() {\n  return (\n    <Provider template={AlertTemplate} {...options}>\n    <div className=\"App\">\n        <UTMBuilder />\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}